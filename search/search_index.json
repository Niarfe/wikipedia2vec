{
    "docs": [
        {
            "location": "/",
            "text": "Wikipedia2Vec\n\n\n\n\n\nIntroduction\n\uf0c1\n\n\nWikipedia2Vec is a tool used for obtaining embeddings (vector representations) of words and entities from Wikipedia.\nIt is developed and maintained by \nStudio Ousia\n.\n\n\nThis tool enables you to learn embeddings that map words and entities into a unified continuous vector space.\nThe embeddings can be used as word embeddings, entity embeddings, and the unified embeddings of words and entities.\nThey are used in the state-of-the-art models of various tasks such as \nentity linking\n, \nnamed entity recognition\n, \nentity relatedness\n, and \nquestion answering\n.\n\n\nThe embeddings can be easily trained by a single command with a publicly available Wikipedia dump as input.\nThe code is implemented in Python, and optimized using Cython and BLAS.\n\n\nPretrained embeddings for 12 languages can be downloaded from \nthis page\n.\n\n\nReference\n\uf0c1\n\n\nIf you use Wikipedia2Vec in a scientific publication, please cite the following paper:\n\n\n@InProceedings{yamada-EtAl:2016:CoNLL,\n  author    = {Yamada, Ikuya  and  Shindo, Hiroyuki  and  Takeda, Hideaki  and  Takefuji, Yoshiyasu},\n  title     = {Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation},\n  booktitle = {Proceedings of The 20th SIGNLL Conference on Computational Natural Language Learning},\n  month     = {August},\n  year      = {2016},\n  address   = {Berlin, Germany},\n  pages     = {250--259},\n  publisher = {Association for Computational Linguistics}\n}\n\n\n\nLicense\n\uf0c1\n\n\nApache License 2.0",
            "title": "Home"
        },
        {
            "location": "/#introduction",
            "text": "Wikipedia2Vec is a tool used for obtaining embeddings (vector representations) of words and entities from Wikipedia.\nIt is developed and maintained by  Studio Ousia .  This tool enables you to learn embeddings that map words and entities into a unified continuous vector space.\nThe embeddings can be used as word embeddings, entity embeddings, and the unified embeddings of words and entities.\nThey are used in the state-of-the-art models of various tasks such as  entity linking ,  named entity recognition ,  entity relatedness , and  question answering .  The embeddings can be easily trained by a single command with a publicly available Wikipedia dump as input.\nThe code is implemented in Python, and optimized using Cython and BLAS.  Pretrained embeddings for 12 languages can be downloaded from  this page .",
            "title": "Introduction"
        },
        {
            "location": "/#reference",
            "text": "If you use Wikipedia2Vec in a scientific publication, please cite the following paper:  @InProceedings{yamada-EtAl:2016:CoNLL,\n  author    = {Yamada, Ikuya  and  Shindo, Hiroyuki  and  Takeda, Hideaki  and  Takefuji, Yoshiyasu},\n  title     = {Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation},\n  booktitle = {Proceedings of The 20th SIGNLL Conference on Computational Natural Language Learning},\n  month     = {August},\n  year      = {2016},\n  address   = {Berlin, Germany},\n  pages     = {250--259},\n  publisher = {Association for Computational Linguistics}\n}",
            "title": "Reference"
        },
        {
            "location": "/#license",
            "text": "Apache License 2.0",
            "title": "License"
        },
        {
            "location": "/features/",
            "text": "Features\n\uf0c1\n\n\n\n\nWikipedia2Vec has two unique features that are designed to effectively learn embeddings from Wikipedia.\n\n\nExtended Skip-Gram Model to Learn Embeddings of Words and Entities\n\uf0c1\n\n\n\n\nWikipedia2Vec is based on the \nWord2vec's skip-gram model\n that learns to predict neighboring words given each word in corpora.\nWe extend the skip-gram model by adding the following two submodels:\n\n\n\n\nThe link graph model\n that learns to estimate neighboring entities given an entity in the link graph of Wikipedia entities.\n\n\nThe anchor context model\n that learns to predict neighboring words given an entity by using a link that points to the entity and its neighboring words.\n\n\n\n\nBy jointly optimizing the skip-gram model and these two submodels, our model simultaneously learns the embedding of words and entities from Wikipedia.\nFor further details, please refer to our paper: \nJoint Learning of the Embedding of Words and Entities for Named Entity Disambiguation\n.\n\n\nAutomatic Generation of Entity Links\n\uf0c1\n\n\nMany entity names in Wikipedia do not appear as links because Wikipedia instructs its contributors \nto link an entity name if it is the first occurrence in the page\n.\nThis is problematic for our model because the anchor context model depends on entity links to generate contextual words of entities.\n\n\nTo address this, we implement a feature that automatically links entity names that do not appear as links.\nIn particular, it takes all words and phrases, and treats them as candidates of entity names if they exist in the \nMention DB\n that contains mapping of an entity name (e.g., \u201cWashington\u201d) to a set of possible referent entities (e.g., Washington, D.C. and George Washington).\nThen, it converts an entity name to a link pointing to an entity if the entity name is unambiguous (i.e., there is only one referent entity associated to the entity name in the DB) or the entity is referred by an entity link in the same page.",
            "title": "Features"
        },
        {
            "location": "/features/#features",
            "text": "Wikipedia2Vec has two unique features that are designed to effectively learn embeddings from Wikipedia.",
            "title": "Features"
        },
        {
            "location": "/features/#extended-skip-gram-model-to-learn-embeddings-of-words-and-entities",
            "text": "Wikipedia2Vec is based on the  Word2vec's skip-gram model  that learns to predict neighboring words given each word in corpora.\nWe extend the skip-gram model by adding the following two submodels:   The link graph model  that learns to estimate neighboring entities given an entity in the link graph of Wikipedia entities.  The anchor context model  that learns to predict neighboring words given an entity by using a link that points to the entity and its neighboring words.   By jointly optimizing the skip-gram model and these two submodels, our model simultaneously learns the embedding of words and entities from Wikipedia.\nFor further details, please refer to our paper:  Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation .",
            "title": "Extended Skip-Gram Model to Learn Embeddings of Words and Entities"
        },
        {
            "location": "/features/#automatic-generation-of-entity-links",
            "text": "Many entity names in Wikipedia do not appear as links because Wikipedia instructs its contributors  to link an entity name if it is the first occurrence in the page .\nThis is problematic for our model because the anchor context model depends on entity links to generate contextual words of entities.  To address this, we implement a feature that automatically links entity names that do not appear as links.\nIn particular, it takes all words and phrases, and treats them as candidates of entity names if they exist in the  Mention DB  that contains mapping of an entity name (e.g., \u201cWashington\u201d) to a set of possible referent entities (e.g., Washington, D.C. and George Washington).\nThen, it converts an entity name to a link pointing to an entity if the entity name is unambiguous (i.e., there is only one referent entity associated to the entity name in the DB) or the entity is referred by an entity link in the same page.",
            "title": "Automatic Generation of Entity Links"
        },
        {
            "location": "/install/",
            "text": "Installation\n\uf0c1\n\n\n\n\nWikipedia2Vec can be installed from PyPI:\n\n\n% pip install wikipedia2vec\n\n\n\n\nAlternatively, you can install the development version of this software from the GitHub repository:\n\n\n% git clone https://github.com/studio-ousia/wikipedia2vec.git\n% cd wikipedia2vec\n% pip install Cython\n% ./cythonize.sh\n% pip install .\n\n\n\n\nWikipedia2Vec requires the 64-bit version of Python, and can be run on Linux, Windows, and Mac OSX.\nIt currently depends on the following Python libraries: \nclick\n, \njieba\n, \njoblib\n, \nlmdb\n, \nmarisa-trie\n, \nmwparserfromhell\n, \nnumpy\n, \nscipy\n, \nsix\n, and \ntqdm\n.\n\n\nIf you want to train embeddings on your machine, it is highly recommended to install a BLAS library.\nWe recommend using \nOpenBLAS\n or \nIntel Math Kernel Library\n.\nNote that, the BLAS library needs to be recognized properly from SciPy.\nThis can be confirmed by using the following command:\n\n\n% python -c 'import scipy; scipy.show_config()'\n\n\n\n\nTo process Japanese Wikipedia dumps, it is also required to install \nMeCab\n and \nits Python binding\n.\nFurthermore, to use \nICU library\n to split either words or sentences or both, you need to install the \nC/C++ ICU library\n and the \nPyICU\n library.",
            "title": "Installation"
        },
        {
            "location": "/install/#installation",
            "text": "Wikipedia2Vec can be installed from PyPI:  % pip install wikipedia2vec  Alternatively, you can install the development version of this software from the GitHub repository:  % git clone https://github.com/studio-ousia/wikipedia2vec.git\n% cd wikipedia2vec\n% pip install Cython\n% ./cythonize.sh\n% pip install .  Wikipedia2Vec requires the 64-bit version of Python, and can be run on Linux, Windows, and Mac OSX.\nIt currently depends on the following Python libraries:  click ,  jieba ,  joblib ,  lmdb ,  marisa-trie ,  mwparserfromhell ,  numpy ,  scipy ,  six , and  tqdm .  If you want to train embeddings on your machine, it is highly recommended to install a BLAS library.\nWe recommend using  OpenBLAS  or  Intel Math Kernel Library .\nNote that, the BLAS library needs to be recognized properly from SciPy.\nThis can be confirmed by using the following command:  % python -c 'import scipy; scipy.show_config()'  To process Japanese Wikipedia dumps, it is also required to install  MeCab  and  its Python binding .\nFurthermore, to use  ICU library  to split either words or sentences or both, you need to install the  C/C++ ICU library  and the  PyICU  library.",
            "title": "Installation"
        },
        {
            "location": "/commands/",
            "text": "Learning Embeddings\n\uf0c1\n\n\n\n\nFirst, you need to download a source Wikipedia dump file (e.g., enwiki-latest-pages-articles.xml.bz2) from \nWikimedia Downloads\n.\nThe English dump file can be obtained by running the following command.\n\n\n% wget https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2\n\n\n\n\nNote that you do not need to decompress the dump file.\n\n\nThen, the embeddings can be trained from a Wikipedia dump using the \ntrain\n command.\n\n\n% wikipedia2vec train DUMP_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_FILE\n: The Wikipedia dump file\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--dim-size\n: The number of dimensions of the embeddings (default: 100)\n\n\n--window\n: The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5)\n\n\n--iteration\n: The number of iterations for Wikipedia pages (default: 5)\n\n\n--negative\n: The number of negative samples (default: 5)\n\n\n--lowercase/--no-lowercase\n: Whether to lowercase words (default: True)\n\n\n--tokenizer\n: The name of the tokenizer used to tokenize a text into words. Possible choices are \nregexp\n, \nicu\n, \nmecab\n, and \njieba\n\n\n--sent-detect\n: The sentence detector used to split texts into sentences. Currently, only \nicu\n is the possible value (default: None)\n\n\n--min-word-count\n: A word is ignored if the total frequency of the word is less than this value (default: 10)\n\n\n--min-entity-count\n: An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5)\n\n\n--min-paragraph-len\n: A paragraph is ignored if its length is shorter than this value (default: 5)\n\n\n--category/--no-category\n: Whether to include Wikipedia categories in the dictionary (default:False)\n\n\n--disambi/--no-disambi\n: Whether to include disambiguation entities in the dictionary (default:False)\n\n\n--link-graph/--no-link-graph\n: Whether to learn from the Wikipedia link graph (default: True)\n\n\n--entities-per-page\n: For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10)\n\n\n--link-mentions\n: Whether to convert entity names into links (default: True)\n\n\n--min-link-prob\n: An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2)\n\n\n--min-prior-prob\n: An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01)\n\n\n--max-mention-len\n: The maximum number of characters in an entity name (default: 20)\n\n\n--init-alpha\n: The initial learning rate (default: 0.025)\n\n\n--min-alpha\n: The minimum learning rate (default: 0.0001)\n\n\n--sample\n: The parameter that controls the downsampling of frequent words (default: 1e-4)\n\n\n--word-neg-power\n: Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75)\n\n\n--entity-neg-power\n: Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0)\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nThe \ntrain\n command internally calls the five commands described below (namely, \nbuild_dump_db\n, \nbuild_dictionary\n, \nbuild_link_graph\n, \nbuild_mention_db\n, and \ntrain_embedding\n).\n\n\nBuilding Dump Database\n\uf0c1\n\n\nThe \nbuild_dump_db\n command creates a database that contains Wikipedia pages each of which consists of texts and anchor links in it.\n\n\n% wikipedia2vec build_dump_db DUMP_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_FILE\n: The Wikipedia dump file\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nBuilding Dictionary\n\uf0c1\n\n\nThe \nbuild_dictionary\n command builds a dictionary of words and entities.\n\n\n% wikipedia2vec build_dictionary DUMP_DB_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_DB_FILE\n: The database file generated using the \nbuild_dump_db\n command\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--lowercase/--no-lowercase\n: Whether to lowercase words (default: True)\n\n\n--tokenizer\n: The name of the tokenizer used to tokenize a text into words. Possible choices are \nregexp\n, \nicu\n, \nmecab\n, and \njieba\n\n\n--min-word-count\n: A word is ignored if the total frequency of the word is less than this value (default: 10)\n\n\n--min-entity-count\n: An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5)\n\n\n--min-paragraph-len\n: A paragraph is ignored if its length is shorter than this value (default: 5)\n\n\n--category/--no-category\n: Whether to include Wikipedia categories in the dictionary (default:False)\n\n\n--disambi/--no-disambi\n: Whether to include disambiguation entities in the dictionary (default:False)\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nBuilding Link Graph (Optional)\n\uf0c1\n\n\nThe \nbuild_link_graph\n command generates a sparse matrix representing the link structure between Wikipedia entities.\n\n\n% wikipedia2vec build_link_graph DUMP_DB_FILE DIC_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_DB_FILE\n: The database file generated using the \nbuild_dump_db\n command\n\n\nDIC_FILE\n: The dictionary file generated by the \nbuild_dictionary\n command\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nBuilding Mention DB (Optional)\n\uf0c1\n\n\nThe \nbuild_mention_db\n command builds a database that contains the mappings of entity names (mentions) and their possible referent entities.\n\n\n% wikipedia2vec build_mention_db DUMP_DB_FILE DIC_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_DB_FILE\n: The database file generated using the \nbuild_dump_db\n command\n\n\nDIC_FILE\n: The dictionary file generated by the \nbuild_dictionary\n command\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--min-link-prob\n: An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2)\n\n\n--min-prior-prob\n: An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01)\n\n\n--max-mention-len\n: The maximum number of characters in an entity name (default: 20)\n\n\n--case-sensitive\n: Whether to detect entity names in a case sensitive manner (default: False)\n\n\n--tokenizer\n: The name of the tokenizer used to tokenize a text into words. Possible choices are \nregexp\n, \nicu\n, \nmecab\n, and \njieba\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nLearning Embeddings\n\uf0c1\n\n\nThe \ntrain_embedding\n command runs the training of the embeddings.\n\n\n% wikipedia2vec train_embedding DUMP_DB_FILE DIC_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nDUMP_DB_FILE\n: The database file generated using the \nbuild_dump_db\n command\n\n\nDIC_FILE\n: The dictionary file generated by the \nbuild_dictionary\n command\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--link-graph\n: The link graph file generated using the \nbuild_link_graph\n command\n\n\n--mention-db\n: The mention DB file generated using the \nbuild_mention_db\n command\n\n\n--dim-size\n: The number of dimensions of the embeddings (default: 100)\n\n\n--window\n: The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5)\n\n\n--iteration\n: The number of iterations for Wikipedia pages (default: 5)\n\n\n--negative\n: The number of negative samples (default: 5)\n\n\n--tokenizer\n: The name of the tokenizer used to tokenize a text into words. Possible values are \nregexp\n, \nicu\n, \nmecab\n, and \njieba\n\n\n--sent-detect\n: The sentence detector used to split texts into sentences. Currently, only \nicu\n is the possible value (default: None)\n\n\n--entities-per-page\n: For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10)\n\n\n--init-alpha\n: The initial learning rate (default: 0.025)\n\n\n--min-alpha\n: The minimum learning rate (default: 0.0001)\n\n\n--sample\n: The parameter that controls the downsampling of frequent words (default: 1e-4)\n\n\n--word-neg-power\n: Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75)\n\n\n--entity-neg-power\n: Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0)\n\n\n--pool-size\n: The number of worker processes (default: the number of CPUs)\n\n\n\n\nSaving Embeddings in Text Format\n\uf0c1\n\n\nsave_text\n outputs a model in a text format.\n\n\n% wikipedia2vec save_text MODEL_FILE OUT_FILE\n\n\n\n\nArguments:\n\n\n\n\nMODEL_FILE\n: The model file generated by the \ntrain_embedding\n command\n\n\nOUT_FILE\n: The output file\n\n\n\n\nOptions:\n\n\n\n\n--out-format\n: The output format. Possible values are \ndefault\n, \nword2vec\n, and \nglove\n. If \nword2vec\n and \nglove\n are specified, the format adopted by \nWord2Vec\n and \nGloVe\n are used, respectively.",
            "title": "Learning Embeddings"
        },
        {
            "location": "/commands/#learning-embeddings",
            "text": "First, you need to download a source Wikipedia dump file (e.g., enwiki-latest-pages-articles.xml.bz2) from  Wikimedia Downloads .\nThe English dump file can be obtained by running the following command.  % wget https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2  Note that you do not need to decompress the dump file.  Then, the embeddings can be trained from a Wikipedia dump using the  train  command.  % wikipedia2vec train DUMP_FILE OUT_FILE  Arguments:   DUMP_FILE : The Wikipedia dump file  OUT_FILE : The output file   Options:   --dim-size : The number of dimensions of the embeddings (default: 100)  --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5)  --iteration : The number of iterations for Wikipedia pages (default: 5)  --negative : The number of negative samples (default: 5)  --lowercase/--no-lowercase : Whether to lowercase words (default: True)  --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are  regexp ,  icu ,  mecab , and  jieba  --sent-detect : The sentence detector used to split texts into sentences. Currently, only  icu  is the possible value (default: None)  --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10)  --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5)  --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5)  --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False)  --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False)  --link-graph/--no-link-graph : Whether to learn from the Wikipedia link graph (default: True)  --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10)  --link-mentions : Whether to convert entity names into links (default: True)  --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2)  --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01)  --max-mention-len : The maximum number of characters in an entity name (default: 20)  --init-alpha : The initial learning rate (default: 0.025)  --min-alpha : The minimum learning rate (default: 0.0001)  --sample : The parameter that controls the downsampling of frequent words (default: 1e-4)  --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75)  --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0)  --pool-size : The number of worker processes (default: the number of CPUs)   The  train  command internally calls the five commands described below (namely,  build_dump_db ,  build_dictionary ,  build_link_graph ,  build_mention_db , and  train_embedding ).",
            "title": "Learning Embeddings"
        },
        {
            "location": "/commands/#building-dump-database",
            "text": "The  build_dump_db  command creates a database that contains Wikipedia pages each of which consists of texts and anchor links in it.  % wikipedia2vec build_dump_db DUMP_FILE OUT_FILE  Arguments:   DUMP_FILE : The Wikipedia dump file  OUT_FILE : The output file   Options:   --pool-size : The number of worker processes (default: the number of CPUs)",
            "title": "Building Dump Database"
        },
        {
            "location": "/commands/#building-dictionary",
            "text": "The  build_dictionary  command builds a dictionary of words and entities.  % wikipedia2vec build_dictionary DUMP_DB_FILE OUT_FILE  Arguments:   DUMP_DB_FILE : The database file generated using the  build_dump_db  command  OUT_FILE : The output file   Options:   --lowercase/--no-lowercase : Whether to lowercase words (default: True)  --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are  regexp ,  icu ,  mecab , and  jieba  --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10)  --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5)  --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5)  --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False)  --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False)  --pool-size : The number of worker processes (default: the number of CPUs)",
            "title": "Building Dictionary"
        },
        {
            "location": "/commands/#building-link-graph-optional",
            "text": "The  build_link_graph  command generates a sparse matrix representing the link structure between Wikipedia entities.  % wikipedia2vec build_link_graph DUMP_DB_FILE DIC_FILE OUT_FILE  Arguments:   DUMP_DB_FILE : The database file generated using the  build_dump_db  command  DIC_FILE : The dictionary file generated by the  build_dictionary  command  OUT_FILE : The output file   Options:   --pool-size : The number of worker processes (default: the number of CPUs)",
            "title": "Building Link Graph (Optional)"
        },
        {
            "location": "/commands/#building-mention-db-optional",
            "text": "The  build_mention_db  command builds a database that contains the mappings of entity names (mentions) and their possible referent entities.  % wikipedia2vec build_mention_db DUMP_DB_FILE DIC_FILE OUT_FILE  Arguments:   DUMP_DB_FILE : The database file generated using the  build_dump_db  command  DIC_FILE : The dictionary file generated by the  build_dictionary  command  OUT_FILE : The output file   Options:   --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2)  --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01)  --max-mention-len : The maximum number of characters in an entity name (default: 20)  --case-sensitive : Whether to detect entity names in a case sensitive manner (default: False)  --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are  regexp ,  icu ,  mecab , and  jieba  --pool-size : The number of worker processes (default: the number of CPUs)",
            "title": "Building Mention DB (Optional)"
        },
        {
            "location": "/commands/#learning-embeddings_1",
            "text": "The  train_embedding  command runs the training of the embeddings.  % wikipedia2vec train_embedding DUMP_DB_FILE DIC_FILE OUT_FILE  Arguments:   DUMP_DB_FILE : The database file generated using the  build_dump_db  command  DIC_FILE : The dictionary file generated by the  build_dictionary  command  OUT_FILE : The output file   Options:   --link-graph : The link graph file generated using the  build_link_graph  command  --mention-db : The mention DB file generated using the  build_mention_db  command  --dim-size : The number of dimensions of the embeddings (default: 100)  --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5)  --iteration : The number of iterations for Wikipedia pages (default: 5)  --negative : The number of negative samples (default: 5)  --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible values are  regexp ,  icu ,  mecab , and  jieba  --sent-detect : The sentence detector used to split texts into sentences. Currently, only  icu  is the possible value (default: None)  --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10)  --init-alpha : The initial learning rate (default: 0.025)  --min-alpha : The minimum learning rate (default: 0.0001)  --sample : The parameter that controls the downsampling of frequent words (default: 1e-4)  --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75)  --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0)  --pool-size : The number of worker processes (default: the number of CPUs)",
            "title": "Learning Embeddings"
        },
        {
            "location": "/commands/#saving-embeddings-in-text-format",
            "text": "save_text  outputs a model in a text format.  % wikipedia2vec save_text MODEL_FILE OUT_FILE  Arguments:   MODEL_FILE : The model file generated by the  train_embedding  command  OUT_FILE : The output file   Options:   --out-format : The output format. Possible values are  default ,  word2vec , and  glove . If  word2vec  and  glove  are specified, the format adopted by  Word2Vec  and  GloVe  are used, respectively.",
            "title": "Saving Embeddings in Text Format"
        },
        {
            "location": "/usage/",
            "text": "Basic Usage\n\uf0c1\n\n\n\n\n>>> from wikipedia2vec import Wikipedia2Vec\n\n>>> wiki2vec = Wikipedia2Vec.load(MODEL_FILE)\n\n>>> wiki2vec.get_word_vector('the')\nmemmap([ 0.01617998, -0.03325786, -0.01397999, -0.00150471,  0.03237337,\n...\n       -0.04226106, -0.19677088, -0.31087297,  0.1071524 , -0.09824426], dtype=float32)\n\n>>> wiki2vec.get_entity_vector('Scarlett Johansson')\nmemmap([-0.19793572,  0.30861306,  0.29620451, -0.01193621,  0.18228433,\n...\n        0.04986198,  0.24383858, -0.01466644,  0.10835337, -0.0697331 ], dtype=float32)\n\n>>> wiki2vec.most_similar(wiki2vec.get_word('yoda'), 5)\n[(<Word yoda>, 1.0),\n (<Entity Yoda>, 0.84333622),\n (<Word darth>, 0.73328167),\n (<Word kenobi>, 0.7328127),\n (<Word jedi>, 0.7223742)]\n\n>>> wiki2vec.most_similar(wiki2vec.get_entity('Scarlett Johansson'), 5)\n[(<Entity Scarlett Johansson>, 1.0),\n (<Entity Natalie Portman>, 0.75090045),\n (<Entity Eva Mendes>, 0.73651594),\n (<Entity Emma Stone>, 0.72868186),\n (<Entity Cameron Diaz>, 0.72390842)]",
            "title": "Basic Usage"
        },
        {
            "location": "/usage/#basic-usage",
            "text": ">>> from wikipedia2vec import Wikipedia2Vec\n\n>>> wiki2vec = Wikipedia2Vec.load(MODEL_FILE)\n\n>>> wiki2vec.get_word_vector('the')\nmemmap([ 0.01617998, -0.03325786, -0.01397999, -0.00150471,  0.03237337,\n...\n       -0.04226106, -0.19677088, -0.31087297,  0.1071524 , -0.09824426], dtype=float32)\n\n>>> wiki2vec.get_entity_vector('Scarlett Johansson')\nmemmap([-0.19793572,  0.30861306,  0.29620451, -0.01193621,  0.18228433,\n...\n        0.04986198,  0.24383858, -0.01466644,  0.10835337, -0.0697331 ], dtype=float32)\n\n>>> wiki2vec.most_similar(wiki2vec.get_word('yoda'), 5)\n[(<Word yoda>, 1.0),\n (<Entity Yoda>, 0.84333622),\n (<Word darth>, 0.73328167),\n (<Word kenobi>, 0.7328127),\n (<Word jedi>, 0.7223742)]\n\n>>> wiki2vec.most_similar(wiki2vec.get_entity('Scarlett Johansson'), 5)\n[(<Entity Scarlett Johansson>, 1.0),\n (<Entity Natalie Portman>, 0.75090045),\n (<Entity Eva Mendes>, 0.73651594),\n (<Entity Emma Stone>, 0.72868186),\n (<Entity Cameron Diaz>, 0.72390842)]",
            "title": "Basic Usage"
        },
        {
            "location": "/pretrained/",
            "text": "Pretrained Embeddings\n\uf0c1\n\n\n\n\nWe provide the embeddings in binary and text format.\nThe binary files can be loaded using the \nWikipedia2Vec.load()\n method (see \nBasic Usage\n).\nThe text files are compatible with the format of the \nWord2vec\n.\nTherefore, these files can be loaded using other libraries such as Gensim's \nload_word2vec_format()\n.\nIn the text files, all entities have a prefix \nENTITY/\n to distinguish them from words.\n\n\nEnglish\n\uf0c1\n\n\n\n\nenwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n  \n500d (bin)\n\n  \n500d (txt)\n\n\nenwiki_20180420_nolg\n (window=5, iteration=10, negative=15, no link graph):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n  \n500d (bin)\n\n  \n500d (txt)\n\n\nenwiki_20180420_win10\n (window=10, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n  \n500d (bin)\n\n  \n500d (txt)\n\n\n\n\nArabic\n\uf0c1\n\n\n\n\narwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nChinese\n\uf0c1\n\n\n\n\nzhwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nDutch\n\uf0c1\n\n\n\n\nnlwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nFrench\n\uf0c1\n\n\n\n\nfrwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nGerman\n\uf0c1\n\n\n\n\ndewiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nItalian\n\uf0c1\n\n\n\n\nitwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nJapanese\n\uf0c1\n\n\n\n\njawiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nPolish\n\uf0c1\n\n\n\n\nplwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nPortuguese\n\uf0c1\n\n\n\n\nptwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nRussian\n\uf0c1\n\n\n\n\nruwiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)\n\n\n\n\nSpanish\n\uf0c1\n\n\n\n\neswiki_20180420\n (window=5, iteration=10, negative=15):\n  \n100d (bin)\n\n  \n100d (txt)\n\n  \n300d (bin)\n\n  \n300d (txt)",
            "title": "Pretrained Embeddings"
        },
        {
            "location": "/pretrained/#pretrained-embeddings",
            "text": "We provide the embeddings in binary and text format.\nThe binary files can be loaded using the  Wikipedia2Vec.load()  method (see  Basic Usage ).\nThe text files are compatible with the format of the  Word2vec .\nTherefore, these files can be loaded using other libraries such as Gensim's  load_word2vec_format() .\nIn the text files, all entities have a prefix  ENTITY/  to distinguish them from words.",
            "title": "Pretrained Embeddings"
        },
        {
            "location": "/pretrained/#english",
            "text": "enwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt) \n   500d (bin) \n   500d (txt)  enwiki_20180420_nolg  (window=5, iteration=10, negative=15, no link graph):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt) \n   500d (bin) \n   500d (txt)  enwiki_20180420_win10  (window=10, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt) \n   500d (bin) \n   500d (txt)",
            "title": "English"
        },
        {
            "location": "/pretrained/#arabic",
            "text": "arwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Arabic"
        },
        {
            "location": "/pretrained/#chinese",
            "text": "zhwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Chinese"
        },
        {
            "location": "/pretrained/#dutch",
            "text": "nlwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Dutch"
        },
        {
            "location": "/pretrained/#french",
            "text": "frwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "French"
        },
        {
            "location": "/pretrained/#german",
            "text": "dewiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "German"
        },
        {
            "location": "/pretrained/#italian",
            "text": "itwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Italian"
        },
        {
            "location": "/pretrained/#japanese",
            "text": "jawiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Japanese"
        },
        {
            "location": "/pretrained/#polish",
            "text": "plwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Polish"
        },
        {
            "location": "/pretrained/#portuguese",
            "text": "ptwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Portuguese"
        },
        {
            "location": "/pretrained/#russian",
            "text": "ruwiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Russian"
        },
        {
            "location": "/pretrained/#spanish",
            "text": "eswiki_20180420  (window=5, iteration=10, negative=15):\n   100d (bin) \n   100d (txt) \n   300d (bin) \n   300d (txt)",
            "title": "Spanish"
        }
    ]
}